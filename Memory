# implementation of card game - Memory

#CamelCase
#camel_case

import simplegui
import random

WIDTH = 800
HEIGHT = 100 
CARDSCOUNT = 16
CARDWIDTH = WIDTH / CARDSCOUNT

# helper function to initialize globals
def new_game():
    global Exposed,FirstClickIdx,SecondClickIdx,GameState,CardNumber,CARDSCOUNT,TurnCount
    CardNumber = []
    for i in range(CARDSCOUNT):
        CardNumber.append(i%(CARDSCOUNT/2))
    random.shuffle(CardNumber) 
    Exposed = [False] * (len(CardNumber))
    FirstClickIdx = 0
    SecondClickIdx = 0
    GameState = 0 
    TurnCount = 0
    Label.set_text("Turns = "+str(TurnCount))
     
# define event handlers
def mouseclick(pos):
    # add game state logic here
    global Exposed,FirstClickIdx,SecondClickIdx,GameState,CardNumber,TurnCount,Label
    CardIndex = pos[0] / CARDWIDTH
    if Exposed[CardIndex] == True:
        return 
    if GameState == 0:
        Exposed[CardIndex] =  True
        GameState = 1
        FirstClickIdx = CardIndex
    elif GameState == 1:
        Exposed[CardIndex] = True
        GameState = 2
        SecondClickIdx = CardIndex
        TurnCount = TurnCount + 1
        Label.set_text("Turns = "+str(TurnCount))
    else:
        if CardNumber[FirstClickIdx] != CardNumber[SecondClickIdx]:
            Exposed[FirstClickIdx] = False
            Exposed[SecondClickIdx] = False
        GameState = 1
        FirstClickIdx = CardIndex
        Exposed[CardIndex] = True
                 
# cards are logically 50x100 pixels in size    
def draw(canvas):
    global CardNumber,Exposed,CARDSCOUNT
    for i in range(CARDSCOUNT):
        if Exposed[i]:
            #canvas.draw_text(text, point, font_size, font_color)
            canvas.draw_text(str(CardNumber[i]),[(CARDWIDTH/2+CARDWIDTH*i),HEIGHT/2],30,"white")
        else: 
            canvas.draw_polygon([[CARDWIDTH*i,0],[CARDWIDTH*i,HEIGHT],
                                 [CARDWIDTH*(i+1),HEIGHT],[CARDWIDTH*(i+1),0]],2,"white","blue")


# create frame and add a button and labels
frame = simplegui.create_frame("Memory", WIDTH, HEIGHT)
frame.add_button("Reset", new_game)
Label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()


# Always remember to review the grading rubric
